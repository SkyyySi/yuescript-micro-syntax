filetype: "yuescript"

detect:
    filename: "\\.yue$"
    header: "#!.*yue$"

rules:
    - error: "\\b([0-9][a-zA-Z0-9_]*)\\b"

    - symbol.brackets: "[(){}\\[\\]]"
    - symbol.operator: "(\\^|\\*|//|/|%|\\+|\\-|\\>|\\>=|\\<|\\<=|\\~=|\\!=|\\!|=|\\.{2}|#|-\\>|=\\>|\\<-|:|\\?{1,2}|\\|\\>)"
    - symbol.constant: "\\.{3}"
    - error: "\\.{4,}"

    - constant.number: "\\b((0[xX](([0-9A-Fa-f][0-9A-Fa-f_]*\\.([0-9A-Fa-f][0-9A-Fa-f_]*|))|(\\.?[0-9A-Fa-f_]+))([pP][-+]?[0-9_]+)?)|((([0-9][0-9_]*\\.([0-9][0-9_]*|))|(\\.?([0-9][0-9_]*|)))([eE][-+]?([0-9][0-9_]*|))?))\\b"

    - identifier.var: "\\b[a-zA-Z_]([a-zA-Z0-9_]+|::|\\.|\\\\)*\\b"

    # `function` and `end` cannot be used as keywords or variables names,
    # but they *are* allowed when used as table keys.
    - error: "(^|[^\\.:\\\\])\\b(function|end)\\b\\s*([^:]|$)"

    - constant: "\\bnew\\b\\s*:"
    - identifier: "\\bgoto\\b\\s+\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b"
    - identifier: "::\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b::"
    - identifier.class: "\\b([A-Z][a-zA-Z0-9]*)\\b"
    - constant: "\\b[A-Z_][A-Z0-9_]*\\b"
    - constant: "(\\b_G\\b\\.)?\\b(_ENV|_G|_VERSION|assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|load|loadstring|loadfile|module|next|pairs|pcall|print|rawequal|rawget|rawlen|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall|newproxy|gcinfo)\\b"
    - constant: "(\\b_G\\b\\.)?\\b(debug|string|math|table|io|coroutine|os|package|utf8|bit32)\\b"
    - constant: "(\\b_G\\b\\.)?\\bdebug\\b\\.\\b(debug|getfenv|gethook|getinfo|getlocal|getmetatable|getregistry|getupvalue|getuservalue|setfenv|sethook|setlocal|setmetatable|setupvalue|setuservalue|traceback|upvalueid|upvaluejoin)\\b"
    - constant: "(\\b_G\\b\\.)?\\bstring\\b\\.\\b(byte|char|dump|find|format|gmatch|gsub|len|lower|match|pack|packsize|rep|reverse|sub|unpack|upper)\\b"
    - constant: "(\\b_G\\b\\.)?\\bmath\\b\\.\\b(abs|acos|asin|atan2|atan|ceil|cosh|cos|deg|exp|floor|fmod|frexp|huge|ldexp|log10|log|max|maxinteger|min|mininteger|modf|pi|pow|rad|random|randomseed|sin|sqrt|tan|tointeger|type|ult)\\b"
    - constant: "(\\b_G\\b\\.)?\\btable\\b\\.\\b(concat|insert|maxn|move|pack|remove|sort|unpack)\\b"
    - constant: "(\\b_G\\b\\.)?\\bio\\b\\.\\b(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)\\b"
    - constant: "(\\b_G\\b\\.)?\\bcoroutine\\b\\.\\b(create|isyieldable|resume|running|status|wrap|yield)\\b"
    - constant: "(\\b_G\\b\\.)?\\bos\\b\\.\\b(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)\\b"
    - constant: "(\\b_G\\b\\.)?\\bpackage\\b\\.\\b(config|cpath|loaded|loadlib|path|preload|seeall|searchers|searchpath)\\b"
    - constant: "\\butf8\\b\\.\\b(char|charpattern|codes|codepoint|len|offset)\\b"
    - constant: "\\bbit32\\b\\.\\b(arshift|band|bnot|bor|btest|bxor|extract|replace|lrotate|lshift|rrotate|rshift)\\b"
    - constant: "(::|\\\\)\\b(close|flush|lines|read|seek|setvbuf|write|byte|char|dump|find|format|gmatch|gsub|len|lower|match|pack|packsize|rep|reverse|sub|unpack|upper)\\b"
    - statement: "\\b(do|while|break|repeat|until|if|elseif|then|else|for|in|return|goto)\\b"
    - statement: "\\b(unless|import|export|as|from|try|catch|extends|using|with|switch|when)\\b"
    - type.keyword: "\\b(class|close|const|global|local|macro)\\b"
    - symbol.operator: "\\b(not|and|or)\\b"
    - constant.bool.true: "\\b(true)\\b"
    - constant.bool.false: "\\b(false)\\b"
    - constant: "\\bnil\\b"
    - statement: "(\\b%q|%!|%Q|%r|%x)\\b"
    - special: "\\b(super|self|cls)\\b"

    # Yuescript only allows the metatable events recognized by Lua itself (see https://lua-users.org/wiki/MetatableEvents)
    # when using angle brackets, everything else causes an error. Note that `<>` on its own is allowed.
    # You may also put string literals in there.
    - symbol.tag:
        start: "\\<"
        end: "\\>"
        rules:
            - error: "^[^\"'\\[].*$"
            - symbol.tag: "\\b(index|newindex|mode|call|metatable|tostring|tonumber|len|pairs|ipairs|gc|name|close|unm|add|sub|mul|div|idiv|mod|pow|concat|band|bor|bxor|bnot|shl|shr|eq|lt|le)\\b"

    - identifier.macro: "\\$\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
    - identifier: "@((\\.|::|\\\\)?[a-zA-Z_][a-zA-Z0-9_]*)?" # self
    - constant:  "@@((\\.|::|\\\\)?[a-zA-Z_][a-zA-Z0-9_]*)?" # self.__class
    - error:   "@@@+((\\.|::|\\\\)?[a-zA-Z_][a-zA-Z0-9_]*)?"

    # Special fileds of classes
    - special: "\\b__(init|class|base|name|parent)\\b"

    # Metatable keys
    - special: "\\b__(index|newindex|mode|call|metatable|tostring|tonumber|len|pairs|ipairs|gc|name|close|unm|add|sub|mul|div|idiv|mod|pow|concat|band|bor|bxor|bnot|shl|shr|eq|lt|le)\\b"

    - constant.string:
        start: "\""
        end: "\""
        skip: "\\\\."
        rules:
            - constant.specialChar: "\\\\([abfnrtvz\\'\"]|[0-9]{1,3}|x[0-9a-fA-F][0-9a-fA-F]|u\\{[0-9a-fA-F]+\\})"
            - identifier: "#\\{.+?\\}"

    - constant.string:
        start: "'"
        end: "'"
        skip: "\\\\."
        rules:
            - constant.specialChar: "\\\\([abfnrtvz\\'\"]|[0-9]{1,3}|x[0-9a-fA-F][0-9a-fA-F]|u\\{[0-9a-fA-F]+\\})"

    - constant.string:
        start: "\\[\\["
        end: "\\]\\]"
        rules: []

    - constant.string:
        start: "\\[=\\["
        end: "\\]=\\]"
        rules: []

    - constant.string:
        start: "\\[==\\["
        end: "\\]==\\]"
        rules: []

    - constant.string:
        start: "\\[===\\["
        end: "\\]===\\]"
        rules: []

    - constant.string:
        start: "\\[====+\\["
        end: "\\]====+\\]"
        rules: []

    - comment.block:
        start: "\\-\\-\\[\\["
        end: "\\]\\]"
        rules:
            - todo: "(TODO|NOTE|FIXME):?"

    - comment.shebang: "^#!.*/(env[ \t]+)?yue[ \t]*$"

    # Doc comments (for lua-language-server https://github.com/LuaLS/lua-language-server)
    # @(alias|as|async|cast|class|deprecated|diagnostic|enum|field|generic|meta|module|nodiscard|operator|overload|package|param|private|protected|return|see|source|type|vararg|version)
    - comment.bright:
        start: "(^|[^\\-])\\-\\-\\-@"
        end: "$"
        rules:
            - error: "[a-zA-Z_][a-zA-Z0-9_]*"
            - statement:
                start: "\\b(alias|as|async|cast|class|deprecated|diagnostic|enum|field|generic|meta|module|nodiscard|operator|overload|package|param|private|protected|return|see|source|type|vararg|version)\\b"
                end: "$"
                rules:
                    - normal: "."
            - comment: "\\-\\-.*"

    - comment:
        start: "\\-\\-"
        end: "$"
        rules:
            - todo: "(TODO|NOTE|FIXME):?"
